import time
import locale
from logging import root
import threading
import requests
from bs4 import BeautifulSoup
import smtplib
import customtkinter
import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image
lastprice=""
url = ""
is_monitoring = True
monitor_thread = None
mon = 1
global label_button
#https://www.emag.ro/sistem-pc-gaming-intel-alder-lake-i9-13900k-pana-la-5-8ghz-128gb-ddr5-hdd-8tb-si-ssd-2tb-m2-pcie-4-0-nvidia-rtx-4090-24gb-gddr6-carcasa-thermaltake-alien-licenta-windows-11-professional-mypc4748/pd/DR9YBRMBM/

def get_price(session):
    global url
    headers = {
        'User-Agent': 'Chrome/103.0.5060.134 '}
    resp = session.get(url, headers=headers)
    soup = BeautifulSoup(resp.text, "html.parser")
    data = (
        soup.select_one("p.product-new-price").text
    )
    return data

def get_name(session):
    global url
    headers = {
        'User-Agent': 'Chrome/103.0.5060.134 '}
    resp = session.get(url, headers=headers)
    soup = BeautifulSoup(resp.text, "html.parser")
    data = (
        soup.select_one("p.page-title-mobile").text
    )
    return data

def get_review(session):
    global url
    headers = {
        'User-Agent': 'Chrome/103.0.5060.134 '}
    resp = session.get(url, headers=headers)
    soup = BeautifulSoup(resp.text, "html.parser")
    data = (
        soup.select_one("a.rating-text").text
    )
    return data

def check_price(data):
    global lastprice
    lastprice=int(entry3.get())
    print(data)
    price=data[0]
    locale.setlocale(locale.LC_ALL, 'ro_RO.UTF-8')
    cleaned_price = ''.join(filter(lambda x: x.isdigit() or x in [',', '.'], price))
    converted_price = locale.atof(cleaned_price)
    if (converted_price<lastprice):
            sendmail()
    lastprice = converted_price
        #print("GamingPC" , data)

def sendmail():
    server = smtplib.SMTP('smtp.gmail.com',587)
    server.ehlo()
    server.starttls()
    server.ehlo()
    server.login('adytzzu20022@gmail.com','dhodgqdgxpjlezid')
    subject='A scazut pretul'
    body='Verifica linkul '+url
    msg=f"Subject: {subject}\n\n{body}"
    server.sendmail(
        'adytzzu20022@gmail.com',
        'copilu.stefan.adrian@gmail.com',
        msg
    )
    print('EMAILUL A FOST TRIMIS')
    server.quit()

def main():
    headers = {
        'User-Agent': 'Chrome/103.0.5060.134 '}
    time_s=int(entry2.get())
    while is_monitoring:
        s = requests.Session()
        data = [
            (get_price(s)),
            ]
        check_price(data)
        time.sleep(time_s)

def start_monitoring():
    global url,monitor_thread, is_monitoring
    if monitor_thread and monitor_thread.is_alive():
        is_monitoring = False
        monitor_thread.join()
    is_monitoring=True
    url=entry1.get()
    monitor_thread = threading.Thread(target=main)
    monitor_thread.start()

def exit_application():
    global is_monitoring
    is_monitoring = False
    root.destroy()

def exit_monitoring(window):
    global is_monitoring
    is_monitoring=False
    window.destroy()
    exit_application()

def start_button():
    global is_monitoring,mon
    is_monitoring=True
    mon=1
def stop_button():
    global is_monitoring,mon,label_button
    if (mon==1):
        is_monitoring=False
        mon=0
        messagebox.showinfo("MonitoringSystem","S-a oprit monitorizarea")
    else:
        #is_monitoring=True
        start_monitoring()
        mon=1
        messagebox.showinfo("MonitoringSystem", "A inceput monitorizarea")

def button_comand():
    start_monitoring()
    monitoring_window()



def monitoring_window():
    global label_button
    root2 = customtkinter.CTk()
    root2.geometry("500x350")
    root2.title("MonitoringApp")
    frame = customtkinter.CTkFrame(master=root2)
    frame.pack(pady=20, padx=60, fill="both", expand=True)
    label = customtkinter.CTkLabel(master=frame, text="Product")
    label.pack(pady=5, padx=5)
    # image = Image.open("C:/Users/Asus/Desktop/bear.jpg")  # Imaginea produsului
    # image = image.resize((200, 200))  # Redimensionare imagine
    # photo = ImageTk.PhotoImage(image)
    # image_label = customtkinter.CTkFrame(master=frame)
    # image_label.pack(pady=10, padx=10)
    s = requests.Session()
    label_name=customtkinter.CTkLabel(master=frame,text=get_name(s),wraplength=250)
    label_name.pack(pady=5,padx=10)
    review=get_review(s)
    review=review.split()
    label_review=customtkinter.CTkProgressBar(master=frame , progress_color="yellow", orientation="horizontal")
    label_review.pack(pady=5, padx=10)
    label_review.set(float(review[0])/5)
    label = customtkinter.CTkLabel(master=frame, text=review)
    label.pack(pady=5, padx=5)
    label_pret=customtkinter.CTkLabel(master=frame, text="Pret:"+get_price(s))
    label_pret.pack(pady=5,padx=5)
    label_button=customtkinter.CTkButton(master=frame, text="Start/Stop", command=stop_button)
    label_button.pack(pady=5, padx=5)
    messagebox.showinfo("MonitoringSystem", "A inceput monitorizarea")
    root2.protocol("WM_DELETE_WINDOW", lambda: exit_monitoring(root2))
    root2.mainloop()


customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("dark-blue")

root = customtkinter.CTk()
root.geometry("500x350")
root.title("MonitoringApp")
frame = customtkinter.CTkFrame(master=root)
frame.pack(pady=20, padx=60, fill="both", expand=True)
label = customtkinter.CTkLabel(master=frame, text="Monitoring System")
label.pack(pady=12, padx=10)

entry1 = customtkinter.CTkEntry(master=frame, placeholder_text="URL")
entry1.pack(pady=12, padx=10)

entry3 = customtkinter.CTkEntry(master=frame, placeholder_text="PRET")
entry3.pack(pady=14, padx=10)

entry2 = customtkinter.CTkEntry(master=frame, placeholder_text="VERIFY TIME (s)")
entry2.pack(pady=16, padx=10)

button = customtkinter.CTkButton(master=frame, text="Monitorizeaza", command=button_comand)
button.pack(pady=16, padx=10)

root.protocol("WM_DELETE_WINDOW", exit_application)

root.mainloop()

# if __name__ == '__main__':
#     main()
